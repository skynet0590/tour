Method và interface
Bài học này nói về method và interface, những cấu trúc định nghĩa đối tượng và các hành vi của nó (lập trình hướng đối tượng)

Tác giả của Go
https://golang.org

* Method

Go không hề có class.
Tuy nhiên bạn có thể định nghĩa method cho các kiểu biến.

Một method là một hàm với một đối số đặc biệt.

Cái đối số này được xuất hiện ở giữa từ khóa `func` và tên hàm.

Trong ví dụ này, Method `Abs` thuộc về kiểu `Vertex` và tên đối số là `v`.

.play methods/methods.go

* Method là hàm

Nhớ rằng: một method chỉ là một hàm cùng với đối số đặc biệt.

Tại đây hàm `Abs` đã được viết như là một hàm không đổi về mặt chức năng.

.play methods/methods-funcs.go

* Tiếp tục về Method

Bạn cũng có thể khai báo một method với không phải là kiểu struct

Trong ví dụ này chúng ta thấy kiểu số `MyFloat` có method là `Abs`.

Bạn chỉ có thể khai báo một method với kiểu sở hữu được định nghĩa trong cùng một package với method mà thôi.
Bạn không thể khai báo một method với kiểu sở hữu được định nghĩa ở trong một package khác.
(ví dụ như kiểu built-in `int` chẳng hạn).

.play methods/methods-continued.go

* Method và con trỏ

Bạn có thể khai bao method với trỏ đến kiểu sở hữu.

Điều này nghĩa là kiểu sở hữu có cú pháp `*T` thay vì `T`.
(Lưu ý rằng `T` ở đây không thể là con trỏ đến kiểu khác ví dụ như `*int`)

Ví dụ, method `Scale` ở đây được định nghĩa cho `*Vertex`.

Method con trỏ có thể sửa giá trị mà nó trỏ đến (như thể `Scale` đã làm ở đây)
Kể từ khi method thường cần sửa giá trị của kiểu sở hữu, con trỏ thường hay được sử dụng hơn.

Thử bỏ đi `*` ở hàm `Scale` ở dòng 16 và xem những thay đổi.

Không có con trỏ, method hoạt động trên một biến được sao chép từ biến ban đầu. (Điều này cũng tương tự với các đối số của hàm)
Method `Scale` phải có con trỏ để thay đổi giá trị của `Vertex` được khai báo trong hàm `main`.

.play methods/methods-pointers.go

* Con trỏ và function

Tại đây chúng ta thấy method `Abs` và `Scale` được viết lại thành hàm.

Một lần nữa thử bỏ đi `*` ở dòng 16.
Bạn có thể thấy tại sao hành vi thay đổi không?
Còn gì nữa bạn cần thay đổi cho ví dụ đó?

(Nếu bạn không chắc, hãy tiếp tục tới trang tiếp theo)

.play methods/methods-pointers-explained.go

* Method và con trỏ gián tiếp

So sánh với 2 chương trình trước, bạn có thể nhận thấy rằng hàm với một biến con trỏ phải truyền vào một giá trị con trỏ:

	var v Vertex
	ScaleFunc(v, 5)  // Compile error!
	ScaleFunc(&v, 5) // OK

Trong khi method với con trỏ trực tiếp có thể nhận hoặc là giá trị hoặc là con trỏ khi chúng ta gọi:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

Với câu lệnh `v.Scale(5)`, ngay cả khi `v` là một giá trị và không phải là con trỏ,
method với con trỏ được gọi một cách tự động.
Đó là, theo như quy ước, Go phiên dịch `v.Scale(5)` thành `(&v).Scale(5)` vì method `Scale` được gán cho một con trỏ.

.play methods/indirection.go

* Method và con trỏ gián tiếp (2)

Điều tương đương xảy ra theo hướng ngược lại.

Hàm mà được định nghĩa đối số truyền vào là giá trị phải được truyền vào kiểu đã chỉ định:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Compile error!

Trong khi method với giá trị trỏ đến có thể gọi qua giá trị hoặc con trỏ đều ok hết:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

Trong trường hợp này, method gọi `p.Abs()` được thông dịch thành `(*p).Abs()`.

.play methods/indirection-values.go

* Chọn con trỏ hay là không?

Có 2 lý do để sử dụng con trỏ

Đầu tiên là method có thể sửa giá trị của kiểu sở hữu nó.

Thứ 2 là tránh việc phải sao chép giá trị của biến sở hữu method mỗi lần gọi.
Điều này có thể hiệu quả hơn nếu kiểu sở hữu là một cái struct lớn. ví dụ:

Trong ví dụ này, cả `Scale` và `Abs` với kiểu sở hữu là `*Vertex`,
ngay cả thông qua `Abs`, method không cần sửa kiểu sở hữu của nó.

Nói chung, tất cả method trên một kiểu nhất định có hoặc là dùng con trỏ hoặc là không,
nhưng không thể cùng lúc cả hai.
(Chúng ta sẽ xem tại sao sau vài bài nữa.)

.play methods/methods-with-pointer-receivers.go

* Interface

Một _kiểu_interface_ được định nghĩa để đăng ký trước method.

Một giá trị của interface có thể giữ bất kỳ kiểu nào mà triền khai những method đó.

*Chú ý:* Có một lỗi trong code ở dòng 22.
`Vertex` không hề triển khai `Abser` bởi vì method `Abs` được định nghĩa chỉ cho `*Vertex` (kiểu con trỏ).

.play methods/interfaces.go

* Interface được triển khai ngầm

Một kiểu triển khai một interface bằng cách triển khai các method của nó.
Không cần phải tuyên bố rõ ràng, không có từ khóa "implements" (triển khai).

Interface ngầm tách dời việc định nghĩa của interface khỏi việc triển khai của nó,
cái mà sau đó có thể xuất hiện trong bất kỳ package nào mà không cần chuẩn bị trước.
(Nôm na là bạn ko cần phải khai báo một kiểu thuộc interface nào,
bạn chỉ cần triển khai các method của interface đó là nó có thể coi như là đã triển khai interface đó. Nếu vẫn chưa hiểu thì thực hành nhiều thôi :)) )

.play methods/interfaces-are-satisfied-implicitly.go

* giá trị của Interface

Đi vào chi tiết, giá trị của interface có thể được xem như một bộ của của giá trị và kiểu cụ thể:

	(value, type)

Gọi một method của một interface sẽ thực thi cái method cùng tên của kiểu đằng sau interface đó.

.play methods/interface-values.go

* Giá trị của Interface nil

Nếu giá trị bên trong của interface là nil, method sẽ được gọi bởi đối tượng nil.

Ở một số ngôn ngữ, điều này sẽ gọi đến một lỗi con trỏ null exception,
nhưng với Go, nó khá phổ thông để viết các method mà xử lý được gọi với đối tượng là nil (giống như method `M` ở trong ví dụ này.)

Chú ý rằng một interface mà giữ một giá trị cụ thể là nil thì bản thân interface đó là not-nil.

.play methods/interface-values-with-nil.go

* Interface Nil

Một interface nil không giữ giá trị cũng không giữ một kiểu.

Việc gọi một method vào một interface nil sẽ gặp lỗi run-time bởi vì không có kiểu nào bên trong interface đó để mà gọi một method.

.play methods/nil-interface-values.go

* Interface rỗng

Một kiểu interface mà không định nghĩa method nào được biết đến là interface rỗng:

	interface{}

Một interface rỗng có thể giữ giá trị của bất kỳ kiểu nào.

Các interface rỗng được sử dụng trng code mà sử lý các giá trị với kiểu không biết.
Ví dụ, `fmt.Print` có thể truyền vào bất kỳ số lượng đối số nào của kiểu `interface{}`

.play methods/empty-interface.go

* Type assertions (Khẳng định kiểu)

Một _type_assertion_ cung cấp việc truy cập đến giá trị của một interface dưới một giá trị cụ thể.

	t := i.(T)

Câu lệnh này khẳng định rằng interface `i` lưu giữ kiểu `T`
và gán một giá trị của kiểu `T` cho biến `t`.

Nếu `i` không giữ kiểu `T`, sẽ xảy ra `panic`.

Để _test_ liệu rằng một interface có giữ một kiểu nào đó không,
_type_assertion_ có thể trả về hai giá trị:
giá trị chỉ định và một giá trị boolean mà báo cáo rằng việc khẳng định kiểu có thành công hay không.

	t, ok := i.(T)

Nếu `i` giữ giá trị của kiểu `T`, vậy thì `t` sẽ có giá trị và `ok` sẽ bằng true.

Nếu không `ok` sẽ bằng false và `t` là bằng zero của kiểu `T`
và không có panic xảy ra.


Lưu ý sự giống nhau giữa cú pháp này và get giá trị từ map.

.play methods/type-assertions.go

* Type switch (switch kiểu)

Một _type_switch_ là một cấu trúc cho phép khẳng định kiểu.

Một type switch giống như câu lệnh switch thông thường,
nhưng case được chỉ định là kiểu biến chứ không phải giá trị của biến,
và các giá trị này được so sánh với kiểu mà được giữ ở trong cái interface đó.

	switch v := i.(type) {
	case T:
		// here v has type T
	case S:
		// here v has type S
	default:
		// no match; here v has the same type as i
	}

Việc khai báo ở trong type switch có cùng cú pháp với khẳng định kiểu `i.(T)`,
nhưng thay thế `T` bởi từ khóa `type`

Ví dụ này kiểm tra xem interface `i` giữ giá trị của kiểu `T` hay là `S`.
Trong mỗi trường hợp của `T` và `S`, giá trị `v` sẽ là kiểu `T` hoặc `S`
và lưu trữ giá trị tương ứng trong `i`.
Trong trường hợp mặc định(không cái nào trùng khớp), giá trị của `v` là cùng kiểu interface và giá trị là `i`.

.play methods/type-switches.go

* Stringers
Một trong số những interface phổ biến nhất là [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] được định nghĩa bởi package [[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

Một `Stringer` là một kiểu mà có thể miêu tả bản thân nó như là một string. Package `fmt` (và nhiều package khác)
sử dụng interface này để in giá trị của nó ra.

.play methods/stringer.go

* Thực hành: Stringers

Tạo kiểu `IPAddr` triển khai `fmt.Stringer` để in địa chỉ của ip

Ví dụ, `IPAddr{1,`2,`3,`4}` sẽ in ra `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Errors

Go bày tỏ lỗi (error) với kiểu `error`.

Kiểu `error` là một built-in interface tương tự như `fmt.Stringer`:

	type error interface {
		Error() string
	}

(giống như `fmt.Stringer`, package `fmt` sử dụng interface `error`  khi in ra giá trị.)

Các hàm thường trả về một giá trị `error`, và việc gọi code nên sử lý lỗi bằng cách kiểm tra xem
error có bằng `nil` hay không.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
		return
	}
	fmt.Println("Converted integer:", i)

`error` nil là thành công; `error` non-nil là thất bại.

.play methods/errors.go

* Thực hành: Errors

Sao chép hàm `Sqrt` của bạn từ [[/flowcontrol/8][earlier exercise]] và sửa nó để trả về một biến `error`.

`Sqrt` nên trả về một error not-nil khi nó nhận một biến âm, như thể là nó không hỗ trợ một số phức.

Tạo một kiểu mới

	type ErrNegativeSqrt float64

và tạo cho nó một `error` bằng cách định nghĩa cho nó một method

	func (e ErrNegativeSqrt) Error() string

method ví dụ như `ErrNegativeSqrt(-2).Error()` trả về `"cannot`Sqrt`negative`number:`-2"`.

*Chú ý:* gọi đến `fmt.Sprint(e)` bên trong method `Error` tạo ra một vòng lặp vô hạn. Bạn có thể tránh điều này bằng chuyển `e` trước:
`fmt.Sprint(float64(e))`. Tại sao?

Thay đổi hàm `Sqrt` để trả về `ErrNegativeSqrt` khí nó nhận một số âm.

.play methods/exercise-errors.go

* Readers

Package `io` định nghĩa interface `io.Reader`.
cái mà đại diện cho việc đọc của truyền dữ liệu(stream of data).

Thư viện tiêu chuẩn của Go bao gồm [[https://golang.org/search?q=Read#Global][many implementations]] của interface này,
bao gồm file, kết nối mạng, compressors, ciphers, và nhiều nữa.

Interface `io.Reader`  có một method `Read`:

	func (T) Read(b []byte) (n int, err error)
`Read` truyền vào dữ liệu byte và trả về sô byte đã được truyền và một giá trị error.
Nó trả về một error `io.EOF` khi việc truyền kết thúc.

Code ví dụ tạo một
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
và tiêu thụ 8 byte của nó một lần.

.play methods/reader.go

* Bài tập: Readers

Triển khai một kiểu `Reader` mà phát ra một dòng dữ liệu vô hạn của ký tự `'A'` (ASCII).

.play methods/exercise-reader.go

* Bài tập: rot13Reader

Một parttern phổ biến là một [[https://golang.org/pkg/io/#Reader][io.Reader]] mà bao một `io.Reader` khác, sửa dòng dữ liệu (stream) theo một số cách.

Ví dụ, hàm [[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]]
lấy một `io.Reader`(một luồng dữ liệu nén) và trả về một `*gzip.Reader` mà triển khai một `io.Reader`(một luồng dữ liệu giải nén)

Triển khai một `rot13Reader` mà triển khai `io.Reader` và đọc từ một `io.Reader`,
sửa luồng dữ liệu bằng cách ứng dụng  [[https://en.wikipedia.org/wiki/ROT13][rot13]] cho tất cả các ký tự alphabe.

Kiểu `rot13Reader` được cung cấp cho bạn.
Tạo một `io.Reader` bằng cách triển khai method `Read` của nó.

.play methods/exercise-rot-reader.go

* Images

[[https://golang.org/pkg/image/#Image][Package image]] định nghĩa interface của `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}
*Chú ý:* `Rectangle` trả về giá trị của method `Bounds` mà thực ra là một[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]],
giống như được khai báo bên trong package `image`

(Xem [[https://golang.org/pkg/image/#Image][the documentation]] để biết thêm chi tiết.)

Kiểu `color.Color` và `color.Model` cũng là interface,
nhưng chúng ta sẽ bỏ qua nó bằng cách sử dụng interface đã được định nghĩa trước:  `color.RGBA` và `color.RGBAModel`.
Những interface này và kiểu được đặc tả bởi [[https://golang.org/pkg/image/color/][image/color package]]

.play methods/images.go

* Thực hành: Images

Có còn nhớ [[/moretypes/18][picture generator]] bạn đã viết trước đây?
Hãy viết một cái khác, nhưng lần này nó sẽ trả về một sự triển khai của `image.Image` thay vì các lát cắt của dữ liệu.

Định nghĩa kiểu dữ liệu `Image` của bạn, triển khai [[https://golang.org/pkg/image/#Image][các method cần thiết]],
và gọi `pic.ShowImage`.

`Bounds` nên trả về một `image.Rectangle`, như thể là `image.Rect(0,`0,`w,`h)`.

`ColorModel` nên trả về `color.RGBAModel`.

`At` nên trả về màu sắc;
giá trị `v` ở trong picture generator tương ứng với `color.RGBA{v,`v,`255,`255}`.

.play methods/exercise-images.go

* Chúc mừng!

Bạn đã hoàn thành bài học!

Bạn có thể quay lại danh sách [[/list][modules]] để tìm những thứ cần học tiếp theo,
hoặc tiếp tục với [[javascript:click('.next-page')][bài kế tiếp]].
