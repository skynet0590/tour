Concurrency
Go cung cấp xử lý đồng thời như một phần cốt lõi của nó. Bài học này trình bày những điều đó và đưa ra một vài ví dụ để biết làm sao chúng được sử dụng.

Tác giả của Go
https://golang.org

* Goroutine

Một _goroutine_ là một luồng được xử lý bởi Go runtime.

	go f(x, y, z)

sẽ bắt đầu chạy một goroutine mới:

	f(x, y, z)

Giá trị của `f`, `x`, `y`, và `z` là ở goroutine hiện tại còn việc khởi chạy `f` xảy ra ở trong goroutine mới.

Các goroutine chạy trong cùng một ngăn nhớ, cho nên việc truy cập để chia sẻ bộ nhớ thì phải đồng bộ hóa.
Package [[https://golang.org/pkg/sync/][`sync`]] khá là hữu dụng trong việc này, mặc dù bạn có thể sẽ không cần chúng nhiều trong Go vì có nhiều giải pháp khác. (Xem các bài tiếp sau.)

.play concurrency/goroutines.go

* Channel

Channel là một kiểu vòi dẫn mà thông qua nó bạn có thể gửi hoặc nhận giá trị bằng cách sử dụng `<-`.

	ch <- v    // Send v to channel ch.
	v := <-ch  // Receive from ch, and
	           // assign value to v.

(Luồng dữ liệu là theo hướng mũi tên.)

Giống như map và slice, channel phải được tạo trước khi sử dụng:

	ch := make(chan int)

Mặc định, gửi và nhận dữ liệu cho đến khi phía bên kia sẵn sàng.
Điều này cho phép goroutines đồng bộ hóa mà không cần khóa rõ ràng hoặc các biến điều kiện.

Code ví dụ này tính tổng các số ở trong một slice, phân phối công việc giữa 2 goroutine.
Một khi cả hai hoàn thành việc tính toàn, nó tính toán kết quả cuối cùng.

.play concurrency/channels.go

* Channel đệm

Channel có thể được _đệm_(buffer). Cung cấp một độ dài đệm như thể đối số thứ 2 vào `make` để khởi tạo một channel đệm:

	ch := make(chan int, 100)

Sửa ví dụ khiến cho bộ đệm bị tràn và xem điều gì xảy ra.

.play concurrency/buffered-channels.go

* Range và Close

Bên gửi channel có thể `close` một channel để  chỉ định rằng không còn giá trị nào sẽ được gửi.
Bên nhận có thể kiểm tra khi nào channel bị `close` bằng cách gán một biến thứ 2 vào:

	v, ok := <-ch

`ok` bằng `false` nếu như không còn giá trị nào để nhận nữa và cái channel đã bị đóng.

Vòng lặp `for`i`:=`range`c` nhận các giá trị từ channel lặp đi lặp lại cho đến khi nó bị `close`.

*Chú*ý:* Chỉ có bên gửi mới nên đóng channel, không bao giờ là bên nhận. Việc gửi vào một channel đã bị đóng sẽ gây ra panic.

*Chú*ý*khác:* Channel không giống như file; bạn không cần thường xuyên đóng chúng.
Việc đóng chỉ cần thiết khi bên nhận phải được nói rằng không còn giá trị nào nữa sẽ đến, như thể chấm dứt vòng lặp `range`.

.play concurrency/range-and-close.go

* Select

Cú pháp `select` khiến goroutine đợi cho nhiều hoạt động tính toán.

Một `select` đóng cho đến khi một trong số các `case` có thể chạy, sau đó nó thi hành `case` đó. Nó chọn một trong số ngẫu nhiên của các `case` đã sẵn sàng.

.play concurrency/select.go

* Default Select

`Case` `default` xảy ra khi `select` mà không có các `case` sẵn sàng khác

Sử dụng một `default` case để thử gửi hoặc nhận mà không cần block:

	select {
	case i := <-c:
		// use i
	default:
		// receiving from c would block
	}

.play concurrency/default-selection.go

* Thực hành: Cây nhị phân

Có thể có nhiều cây nhị phân khác nhau với cùng một chuỗi các giá trị được lưu trữ trong đó.
Ví dụ, đây là 2 cây nhị phân đang lưu trữ chuỗi số 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

Một hàm để kiểm tra xem 2 cây nhị phân có cùng lưu trữ một chuỗi giá trị hay không là khá phức tạp trong hầu hết các ngôn ngữ.
Chúng ta sẽ sử dụng Go concurrency và channel để viết một giải pháp đơn giản.

Ví dụ này sử dụng package `tree`, cái mà định nghĩa kiểu:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}

Tiếp tục ở [[javascript:click('.next-page')][trang kế tiếp]].

* Thực hành: Cây nhị phân

*1.* Triển khai hàm `Walk`.

*2.* Kiểm tra hàm `Walk`

Hàm `tree.New(k)` xây dựng một cấu trúc ngẫu nhiên (nhưng luôn luôn được sắp xếp) cây nhị phân mà giữ các giá trị `k`, `2k`, `3k`, ..., `10k`.

Tạo một channel `ch` và bắt đầu walk:

	go Walk(tree.New(1), ch)

Sau đó đọc và in ra 10 giá trị từ channel. Nó nên là các số 1, 2, 3, ..., 10.

*3.* Triển khai hàm `Same` sử dụng `Walk` để xác định xem `t1` và `t2` có lưu trữ cùng giá trị hay không.

*4.* Kiểm tra hàm `Same`.

`Same(tree.New(1),`tree.New(1))` nên trả về true, và `Same(tree.New(1),`tree.New(2))` nên trả về false.

Tài liệu cho `Tree` có thể được thấy ở [[https://godoc.org/golang.org/x/tour/tree#Tree][đây]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Chúng ta đã thấy làm channel tuyệt thế nào để liên lạc giữa các goroutine.

Nhưng điều gì xảy ra nếu chúng ta không cần trao đổi?
Điều gì nếu chúng ta chỉ muốn chắc chắn rằng chỉ một goroutine có thể truy cập vào 1 biến tại một thời điểm để tránh xảy ra đụng độ?

Khái niệm này được gọi là _mutual_exclusion_ (loại trừ lẫn nhau), và tên quy ước cho cấu trúc dữ liệu đó là _mutex_.

Thư viện tiêu chuẩn của Go cung cấp việc đó với [[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] và nó có 2 method:

- `Lock`
- `Unlock`

Chúng ta có thể khóa một đoạn code trong việc loại trừ lẫn nhau bằng cách bao quanh nó bởi việc gọi `Lock` và `Unlock`
giống như ở method `Inc`.

Chúng ta cũng có thể sử dụng `defer` để chắc chắn rằng `mutex` sẽ được mở khóa như thể trong method `Value`.

.play concurrency/mutex-counter.go

* Thực hành: Web Crawler

Trong bài tập này bạn sẽ sử dụng Go concurrency để thực thi web crawl song song.

Sửa hàm `Crawl` để lấy các URL song song mà không lấy cùng một URL 2 lần.

_Nhắc_nhở_: bạn có thể lưu tạm các URL mà đã lấy vào một map, nhưng mà map không an toàn khi sử dụng trong concurrency!

.play concurrency/exercise-web-crawler.go

* Where to Go from here...

#appengine: Bạn có thể bắt đầu bằng cách
#appengine: [[https://golang.org/dl/][cài đặt Go]].

#appengine: Một khi bạn đã cài Go rồi
[[https://golang.org/doc/][Tài liệu Go]] là một nơi tuyệt vời để bắt đầu
#appengine: continue.
Nó bao gồm các tài liệu tham khải, các bài hướng dẫn, video, và nhiều thứ nữa.

Để học làm cách nào để tổ chức và làm việc với code Go, Xem [[https://www.youtube.com/watch?v=XCsL89YtqCs][this screencast]] hoặc đọc [[https://golang.org/doc/code.html][How to Write Go Code]].

Nếu bạn cần trợ giúp với thư viện tiêu chuẩn, xem [[https://golang.org/pkg/][package tham khảo]].
Để nhận trợ giúp với bản thân ngôn ngữ, bạn có thể ngạc nhiên khi thấy [[https://golang.org/ref/spec][Language Spec]] khá là dễ đọc.

Khám phá thêm nữa về Go concurrency, xem
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]]
([[https://talks.golang.org/2012/concurrency.slide][slides]])
và
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]]
([[https://talks.golang.org/2013/advconc.slide][slides]])
và đọc
[[https://golang.org/doc/codewalk/sharemem/][Share Memory by Communicating]]
codewalk.

Để bắt đầu với việc viết ứng dụng web, xem
[[https://vimeo.com/53221558][A simple programming environment]]
([[https://talks.golang.org/2012/simple.slide][slides]])
và đọc bài hướng dẫn
[[https://golang.org/doc/articles/wiki/][Writing Web Applications]] .

[[https://golang.org/doc/codewalk/functions/][First Class Functions in Go]] codewalk đưa ra một viễn cảnh thú vị về các loại chức năng của Go.

[[https://blog.golang.org/][Go Blog]] có một kho lưu trữ lớn các bài báo thông tin về Go.

Ghé thăm [[https://golang.org][golang.org]].

