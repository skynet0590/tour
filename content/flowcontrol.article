Các câu lệnh quản lý luồng: for, if, else, switch và defer
Học cách quản lý luồng trong code của bạn với các điều kiện, vòng lặp, switch và defer.

Tác giả của Go
https://golang.org

* For

Go chỉ có 1 loại vòng lặp mà thôi, đó là `for`.

Vòng lặp `for` cơ bản có 3 phần được tách biệt bằng dấu phẩy:

- phần mở đầu - init statement: được thi hành trước khi việc lặp diễn ra
- phần biểu thức điều kiện - condition expression: được thực thi sau khi việc lặp diễn ra
- phần tuyên bố cập nhật - post statement: thực thi tại cuối của mỗi lần lặp

Phần mở đầu thường dùng để khai báo một biến ngắn, và các biến được khai báo ở đây sẽ chỉ có hiệu lực trong nội bộ
vòng lặp `for` mà thôi.

Vòng lặp sẽ dừng một khi biểu thức điều kiện trả về một kết quả boolean bằng `false`.

*Chú*ý:* Không giống như C, Java, hay là Javascript Go không sử dụng dấu ngoặc đơn bao quanh 3 phần của câu lệnh `for`
cho nên dấu ngoặc kếp `{`}` là bắt buộc.

.play flowcontrol/for.go

* Tiếp tục về For

Phần mở đầu và phần tuyên bố cập nhật là tùy chọn - có thể bỏ trống.

.play flowcontrol/for-continued.go

* For là "while" của Go

Tại điểm này bạn có thể bỏ đi các dấu phảy: `while` trong C giờ là `for` trong Go.

.play flowcontrol/for-is-gos-while.go

* Forever

Nếu như bạn bỏ nốt phần điều kiện đi thì for sẽ lặp mãi mãi và trở thành vòng lặp vô cực =))

.play flowcontrol/forever.go

* If

Câu lệnh `if` trong Go cũng giống như vòng lặp `for`; bạn không cần
dấu ngoặc đơn `(`)` nhưng `{`}` là bắt buộc.

.play flowcontrol/if.go

* If với khai báo ngắn

Giống như `for`, câu lện `if` có thể bắt đầu với một khai báo ngắn để thi hành trước phần điều kiện.

Các biến được khai báo trong phần này chỉ có hiệu lực trong phạm vi đến khi kết thúc của lệnh `if`.

(Thử sử dụng `v` sau khi đã gọi lệnh `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If và else

Các biến được khai báo bên trong `if` cũng hiệu lực ở phần bên trong của `else`.

(Cả 2 lần gọi đến `pow` trả về kết quả của chúng trước khi gọi `fmt.Println` ở trong hàm `main`)

.play flowcontrol/if-and-else.go

* Thực hành: Loop và Function

Giống như một cách để sử dụng func và loop, hãy triển khai một hàm căn bậc 2:
đưa ra một số x, chúng ta muốn tìm số z mà giá trị của z² là gần với x nhất.

Máy tính thường tính căn bậc hai của x bằng cách sử dụng vòng lặp.
Bắt đầu bằng việc đoán z, chúng ta có thể điều chỉnh z dựa trên việc z² gần với x như thế nào,
rồi đưa ra một lần thử tốt hơn:

	z -= (z*z - x) / (2*z)

Lặp lại điều chỉnh làm cho những lần đoán tốt hơn và tốt hơn cho đến khi chúng ta chạm đến một câu trả lời mà gần nhất với giá trị căn bậc hai có thể là.

Triển khai ý tưởng này trong `func`Sqrt`đã được cung cấp.

Một giá trị đoán hợp lệ ban đầu cho z là 1, không quan trọng đầu vào như thế nào.
Để bắt đầu, lặp lại việc tính toàn 10 lần và in ra z mỗi lần.
Xem câu trả lời gần như thế nào với các giá trị khác nhau của x (1, 2, 3, ...) và nhanh như thế nào giá trị phỏng đoán được cải thiện.

Nhắc nhở: Để khai báo và khởi tạo giá trị float,
bạn nên sử dụng quy ước sau:

	z := 1.0
	z := float64(1)

Tiếp theo, thay đổi điều kiện lặp để dừng lại một khi giá trị đã dừng thay đổi (hoặc là giá trị thay đổi trở lên rất rất nhỏ).
Xem xem nếu nó nhỏ hơn 10 lần lặp.
Thử một giá trị khởi tạo khác cho z, ví dụ như x hoặc z/2.
Kết quả của bạn có gần với hàm tiêu chuẩn [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] hay không?

(*Chú*ý:* Nếu bạn hứng thú với chi tiết của thuật toán, giá trị `z² − x` ở trên xa như thế nào so với z² nơi mà nó cần phải là (x),
Và phép chia cho 2z là đạo hàm của z², để chia tỷ lệ chúng tôi điều chỉnh z bằng cách thay đổi nhanh chóng z².
Phương thức tiếp cận này được gọi là [[https://en.wikipedia.org/wiki/Newton%27s_method][phương thức Newton]].
Nó hoạt động tốt cho nhiều chức năng nhưng đặc biệt tốt cho căn bậc hai.)
.play flowcontrol/exercise-loops-and-functions.go

* Switch

Một câu lệnh `switch` là một cách ngắn hơn để viết `if`-`else`.
Nó chạy trường hợp đầu tiên có giá trị bằng biểu thức điều kiện.

Go switch giống với C, C++, Java, JavaScript, và PHP,
ngoại trừ rằng Go chỉ chạy những case đã được chọn, không phải tất cả các case.
Câu lệnh `break` là cần thiết tại cuối của mỗi case của các ngôn ngữ trên được cung cấp tự động trong Go.
Một điểm quan trọng khác đó là Go switch case cần phải không là hằng số, và các giá trị liên quan cần phải không là số nguyên.

.play flowcontrol/switch.go

* Lệnh Switch đánh giá

Switch case đánh giá các case từ đầu đến cuối, dừng lại khi một case thành công.

(Ví dụ,

	switch i {
	case 0:
	case f():
	}

không gọi `f` nếu `i==0`.)

#appengine: *Note:* Time in the Go playground always appears to start at
#appengine: 2009-11-10 23:00:00 UTC, a value whose significance is left as an
#appengine: exercise for the reader.

.play flowcontrol/switch-evaluation-order.go

* Switch khi không có điều kiện

Switch mà không có điều kiện là giống với `switch`true`.

Cấu trúc này có thể là một cách gọn gàn để viết chuỗi dài if-then-else.

.play flowcontrol/switch-with-no-condition.go

* Defer

Một câu lệnh defer trì hoãn việc thực hiện một hàm cho đến khi hàm bao nó return.

Đối số của việc gọi defer được nhận biết ngay lập tức, nhưng lệnh gọi hàm không được thực thi cho đến khi hàm bao nó return.

.play flowcontrol/defer.go

* Ngăn xếp defer

Một lời gọi hàm defer được đẩy vào một ngăn xếp.
Khi một hàm return, các lời gọi defer mới được thực thi theo thứ tự cuối cùng ra trước.

Để học thêm về defer bạn có thể ghé thăm
[[https://blog.golang.org/defer-panic-and-recover][blog post]].

.play flowcontrol/defer-multi.go

* Chúc mừng!

Bạn đã hoàn thành bài học này!

Bạn có thể quay trở lại [[/list][modules]] để tìm kiếm cái gì đó để học tiếp theo, hoặc tiếp tục với [[javascript:click('.next-page')][bài kế tiếp]].
