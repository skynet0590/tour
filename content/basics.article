Các Package, biến, và function.
Học các thành phần cơ bản của bất kỳ chương trình Go nào

Tác giả của Go
https://golang.org

* Packages

Cứ mỗi chương trình Go là được tạo bởi các package.

Các chương trình bắt đầu khởi chạy với package `main`

Chương trình này đang sử dụng các package với đường dẫn import là `"fmt"` và `"math/rand"`.

Theo quy ước, tên package là giống với phần tử cuối cùng của đường dẫn import. Ví dụ: package `"math/rand"` bao gồm các file mà bắt đầu với lời khai báo `package`rand`.

#appengine: *Note:* The environment in which these programs are executed is
#appengine: deterministic, so each time you run the example program
#appengine: `rand.Intn` will return the same number.
#appengine:
#appengine: (To see a different number, seed the number generator; see [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
#appengine: Time is constant in the playground, so you will need to use something else as the seed.)

.play basics/packages.go

* Import

Ví dụ này nhóm các thành phần import trong một cặp thẻ ngoặc đơn, bao bởi 1 khai báo "factored" import

Bạn cũng có thể viết nhiều khai báo import, Giống như vậy:

	import "fmt"
	import "math"

Nhưng sử dụng factored import có vẻ tốt hơn

.play basics/imports.go

* Tên Export

Trong Go, một cái tên được export nếu nó bắt đầu với một chữ cái viết hoa
Ví dụ, `Pizza` là một tên được export, giống như `Pi`, cái mà được export từ package `math`

`pizza` và `pi` bắt đầu với chữ cái viết thường, nên chúng ko được export.

Khi import 1 package, bạn chỉ có thể gọi đến các tên được export.
Bất kỳ các thành phần không được export là không thể truy cập từ các package bên ngoài.

Chạy code. Và chú ý thông báo lỗi.

Để sửa lỗi này, sửa tên `math.pi` thành `math.Pi` và thử lại.

.play basics/exported-names.go

* Các Function

Một function có thể có 0 hoặc nhiều biến.

Trong ví dụ này, `add` truyền vào 2 biến với kiểu `int`.

Chú ý rằng kiểu biến được khai báo sau tên biến

(Để biết thêm tại sao kiểu biến trông như thế này, xem [[https://blog.golang.org/gos-declaration-syntax][Go's declaration syntax]].)

.play basics/functions.go

* Tiếp tục về Function

Khi có 2 hoặc nhiều hơn tên biến trong function dùng chung 1 kiểu, bạn có thể bỏ qua tên kiểu ở mỗi biến và viết vào cuối

Trong ví dụ này, chúng ta dút gọn

	x int, y int

thành

	x, y int

.play basics/functions-continued.go

* Nhiều biến trả về.

Một function có thể trả về bao nhiêu biến tùy thích.

Function `swap` trả về 2 string

.play basics/multiple-results.go

* Tên biến được định nghĩa trước

Các biến trả về của Go có thể được đặt tên. Nếu vậy, chúng được xem như các biến được định nghĩa ở trên cùng của function.

Những cái tên đó nên được sử dụng để miêu tả biến trả về.

Một khai báo `return` mà không cần truyền biến sẽ trả về các biến đã được đặt tên. Điều này được gọi là "naked" return.

Các khai báo Naked return nên chỉ được sử dụng trong các function ngắn, như trong ví dụ ở đây. Chúng có thể gây rắc rối trong việc đọc hiểu nếu function dài hơn

.play basics/named-results.go

* Biến

Khai báo `var` biểu đạt một danh sách của các biến; giống như trong function, kiểu biến được định nghĩa cuối cùng

Một khai báo `var` có thể đặt ngang hàng với package hoặc function. Chúng ta có thể thấy trong ví dụ này

.play basics/variables.go

* Biến và sự khởi tạo

Việc khai báo biến có thể bao gồm khởi tạo, một giá trị mỗi biến

Nếu đã khai báo khởi tạo, kiểu biến có thể được bỏ qua; biến đó sẽ lấy kiểu của giá trị khởi tạo

.play basics/variables-with-initializers.go

* Khai báo dút gọn

Bên trong một function, một lời khai báo `:=` có thể được sử dụng để thay thế `var` cùng với kiểu được ngầm hiểu

Bên ngoài một function, cứ mỗi lời khai báo phải bắt đầu với một keyword (`var`, `func`, ...) nên cấu trúc `:=` không thể được thực hiện.

.play basics/short-variable-declarations.go

* Các kiểu cơ bản

Các kiểu cơ bản của Go là

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias for uint8

	rune // alias for int32
	     // represents a Unicode code point

	float32 float64

	complex64 complex128

Ví dụ này cho thấy các biến của một vài kiểu
và biến cũng được khai báo bao trong một khối, giống với khai báo import

Kiểu `int`, `uint`, và `uintptr` thường chiếm 32 bit trong các hệ thống 32-bit và là 64 bit trong các hệ thống 64-bit
Khi bạn cần một giá trị số nguyên bạn nên sử dụng `int` trừ khi bạn có một lý do đặc biệt để sử dụng một các loại khác (sized or unsigned integer - int8, int16, ...)

.play basics/basic-types.go

* Giá trị rỗng

Các biến được khai báo mà không gán giá trị khởi tạo sẽ được nhận giá trị rỗng
Variables declared without an explicit initial value are given their
_zero_value_.

Giá trị rỗng bao gồm:

- `0` với các kiểu số,
- `false` với kiểu boolean
- `""` (chuỗi rỗng) với string.

.play basics/zero.go

* Ép kiểu

Cú pháp `T(v)` sẽ chuyển đổi `v` thành kiểu `T`.

Một số ví dụ về ép kiểu:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Hoặc là đơn giản hơn:

	i := 42
	f := float64(i)
	u := uint(f)

Không giống như C, việc gán trong Go giữa các thành phần khác kiểu yêu cầu một lần chuyển đổi kiểu rõ ràng.
Thử bỏ khai báo ép kiểu `float64` hoặc `uint` trong ví dụ và xem xem điều gì xảy ra.

.play basics/type-conversions.go

* Nội suy kiểu

Khi khai báo 1 biến mà không định rõ kiểu (sử dụng cú pháp `:=` hoặc `var`=`), các kiểu biến được nội suy từ giá trị của thành phần bên tay phải

Khi phần bên phải của việc khai báo được định kiểu, một biến mới là cùng một kiểu với nó

	var i int
	j := i // j is an int

Nhưng khi phần bên phải bao gồm một số không định kiểu, biến mới có thẻ là `int`, `float64`, hoặc `complex128` tùy vào độ chính xác của hằng số:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Thử thay đổi giá trị khởi tạo của `v` trong ví dụ quan sát kiểu của nó ảnh hưởng như thế nào.

.play basics/type-inference.go

* Hằng số

Hằng số được khai báo giống như biến, nhưng với từ khóa `const`.

Hằng số có thể là một ký tự, string, boolean, hoặc giá trị số.

Hằng số không thể được khai báo bằng cú pháp `:=`

.play basics/constants.go

* Hằng số là số

Hằng số là số có tính rõ ràng cao trong giá trị.

Một hằng số không định kiểu sẽ lấy một kiểu tùy vào ngữ cảnh

Thử `needInt(Big)`

(Một kiểu `int` có thể lưu trữ tối đa một số nguyên 64 bit, và đôi khi ít hơn.)


.play basics/numeric-constants.go

* Xin chúc mừng!

Bạn đã hoàn thành bài học này!

Bạn có thể quay lại trang [[/list][danh sách]] để tìm cái gì đó để học tiếp, hoặc tiếp tục bằng cách click vào [[javascript:click('.next-page')][bài tiếp theo]].
