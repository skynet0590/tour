Các kiểu: struct, slice, và map
Học cách định nghĩa kiểu dựa vào những cái có sẵn: bài học này nói vể structs, array, slice, and map.

Tác giả
https://golang.org

* Con trỏ

Go có con trỏ
Một con trỏ lưu trữ địa chỉ của một giá trị
Go has pointers.

Kiểu `*T` là một con trỏ của kiểu `T`. Giá trị rỗng của nó là `nil`.

	var p *int

Toán tử `&` tạo một con trỏ tới toán hạng của nó.

	i := 42
	p = &i

Toán tử `*` biểu thị giá trị cơ bản của con trỏ.

	fmt.Println(*p) // read i through the pointer p
	*p = 21         // set i through the pointer p

Điều này được biết đến như là [[https://en.wikipedia.org/wiki/Dereference_operator][dereferencing]] hoặc [[https://www.quora.com/What-are-direct-and-indirect-pointers-in-the-C-language][indirect]].

Không giống như C, Go không có con trỏ số học .

.play moretypes/pointers.go

* Struct

Một `struct` là một tập hợp các trường (field).

.play moretypes/structs.go

* Các trường của Struct

Các trường của struct truy cập bằng cách sử dụng dấu `.`

.play moretypes/struct-fields.go

* Con trỏ và struct

Trường của struct có thể được truy cập thông qua con trỏ của struct.

Để truy cập đến trường `X` của một struct khi chúng ta có con trỏ `p` chúng ta
nên viết `(*p).X`.
Tuy nhiên, ký hiệu đó là cồng kềnh, nên Go cho phép chúng ta
chỉ cần viết `p.X`.

.play moretypes/struct-pointers.go

* Struct Literal

Struct literal biểu thị một giá trị struct mới được phân bổ bằng cách liệt kê các giá trị vào các trường của nó

Bạn có thể chỉ khai báo 1 trường bằng cách sử dụng cú pháp `Name:`. Và các tên trường khác có thể bỏ qua.

Tiền tố `&` trả về giá trị con trỏ của struct

.play moretypes/struct-literals.go


* Array

Kiểu `[n]T` là một array với `n` giá trị của kiểu `T`

Cú pháp

	var a [10]int

Khai báo 1 biến `a` là array của 10 số (int).

Độ dài của 1 array là một phần của nó, cho nên array không thể thay đổi được độ dài.
Điều này có vẻ giới hạn, nhưng mà đừng lo;
Go cung cấp một cách tiện lợi để làm việc với array.

.play moretypes/array.go


* Slice

Một array có kích cỡ là cố định.
Một slice, mặt khác, kích cỡ của nó là linh động,
có thể thay đổi số lượng phần tử so với 1 array.
Trong thực tế, slice thường phổ biến hơn nhiều so với array.

Kiểu `[]T` là một slice với các phần tử của nó mang kiểu `T`

Một slice được hình thành bằng 2 chỉ số,
giới hạn dưới và trên, cách nhau bởi dấu `:`

	a[low : high]

Lựa chọn này lấy một quãng mà bao gồm phần tử đầu tiên,
nhưng lại không bao gồm phần tử cuối cùng.

Như ví dụ này tạo ra một slice mà bao gồm phần tử từ 1 đến 3 của `a`

	a[1:4]

.play moretypes/slices.go


* Slice giống như là tham chiếu đến array

Một slice không hề lưu trữ dữ liệu gì,
nó chỉ miêu tả một array dưới nó.

Thử thay đổi phần tử của một slice
sẽ sửa đổi các phần tử tương ứng của mảng bên dưới của nó.

Các slice khác mà chia sẻ cùng một array bên dưới sẽ thấy những thay đổi này.

.play moretypes/slices-pointers.go


* Slice literal

Một slice literal giống với array literal mà không có độ dài(length).

Đây là một array literal:

	[3]bool{true, true, false}

Và đây tạo cùng một array giống như ở trên,
sau đó xây dựng một slice tham chiếu đến nó:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Slice defaults

Khi cắt, bạn có thể bỏ qua giới hạn trên hoặc dưới để thay vào đó sử dụng giá trị mặc định của chúng.

Giá trị mặc định là 0 cho giới hạn dưới và là độ dài (length) của slice cho giới hạn trên.

Với array

	var a [10]int

Những slice này là tương đương:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Độ dài(length) và sức chứa(capacity) của Slice

Một slice có cả _độ_dài_ và _sức_chứa_.

Độ dài của một slice là số lượng phần tử nó bao gồm.

Sức chứa của một slice là số phần tử của cái array tham chiếu đến nó,
tính từ phần tử đầu tiên của slice.

Có thể thu được độ dài và sức chứa của slice `s` bằng cách sử dụng cú pháp `len(s)` và `cap(s)`.

Bạn có thể kế thừa độ dài của slice bằng cách "cắt" lại nó,
miễn là nó có đủ sức chưa.
Hãy thử thay đổi một trong các slice trong chương trình ví dụ để mở rộng nó vượt quá sức chứa của nó và xem điều gì sẽ xảy ra.

.play moretypes/slice-len-cap.go


* Nil slice

Giá trị rỗng của một slice là `nil`.

Một slice `nil` có độ dài và sức chứa là 0 và không tham chiếu đến array nào cả.

.play moretypes/nil-slices.go


* Tạo một slice với make

Slice có thể được tạo với function `make`;
điều này cho thấy làm sao để tạo ra các array với độ dài linh động.

Function `make` phân bổ một array rỗng và trả về một slice tham chiếu đến nó:

	a := make([]int, 5)  // len(a)=5

Để khai báo sức chứa, truyền thêm biến thứ 3 vào cho `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slice của slice

Slice có thể bao hàm bất cứ cái gì, ngay cả một kiểu slice khác.

.play moretypes/slices-of-slice.go


* Thêm giá trị vào một slice

Rất là phổ biến để thêm một giá trị cho slice, do đó Go cung cấp một hàm `append`.
[[https://golang.org/pkg/builtin/#append][Tài liệu này]] dành cho các hàm được xây dựng sẵn cũng miêu tả `append`

	func append(s []T, vs ...T) []T

Biến đầu tiên `s` của `append` là một slice của kiểu `T`, và phần còn lại là giá trị mang kiểu `T` được thêm vào nó.

Kết quả của `append` là một slice bao gồm tất cả các phần tử của slice ban đầu cùng với các giá trị mới được cung cấp.

Nếu array tham chiếu của `s` quá nhỏ để lưu trữ toàn bộ các giá trị nhận thì một array lớn hơn sẽ được phân bổ.
slice trả về sẽ được trỏ đến array mới được phân bổ.

(Để học thêm về slice, vui lòng đọc [[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]])

.play moretypes/append.go


* Range

Lệnh `range` của vòng lặp `for` được dùng để lặp qua một slice hoặc map.

Khi lặp qua một slice, hai giá trị được trả về mỗi lần lặp.
Cái thứ nhất là index, cái thứ hai là giá trị của các phần tử trả về của index đó.

.play moretypes/range.go

* Tiếp tục về Range

Bạn có thể bỏ qua index hoặc giá trị bằng cách gán cho nó `_`.

    for i, _ := range pow
    for _, value := range pow

Nếu bạn chỉ muốn lấy index, bạn có thể bỏ qua cái biến thứ 2.

    for i := range pow

.play moretypes/range-continued.go

* Thực hành: Slice

Triển khai `Pic`. Nó nên trả về một slice có độ dài `dy`. cứ mỗi phần tử của nó là một slice có `dx` số nguyên dương 8-bit(uint8).
Khi bạn chạy chương trình, nó sẽ hiển thị bức tranh của bạn, diễn giải các số nguyên dưới dạng các giá trị thang độ xám và xanh da trời

Bức tranh hiển thị dựa vào thuật toán của bạn. Có thể là `(x+y)/2`, `x*y`, hay `x^y`.

(Bạn cần sử dụng một vòng lặp để phân bổ mỗi giá trị `[]uint8` vào trong kiểu `[][]uint8`.)

(Sử dụng `uint8(intValue)` để ép kiểu.)

.play moretypes/exercise-slices.go

* Map

Một map đối chiếu các từ khóa (key) đến các giá trị (value)

Giá trị rỗng của một map là `nil`
Một map `nil` không có key, cũng không thể thêm key vào nó

Hàm `make` trả về một map của kiểu được khai báo và có thể sử dụng được.

.play moretypes/maps.go

* Map literal

Map literals cũng giống như struct literal, nhưng key là bắt buộc.

.play moretypes/map-literals.go

* Tiếp tục về Map literal

Nếu kiểu ở mức phần tử chỉ là tên kiểu, bạn có thể bỏ qua nó trong các phần tử của map literal.

.play moretypes/map-literals-continued.go

* Mutating Maps (chả biết dịch là gì)

Tạo hoặc cập nhật phần tử trong map `m`:

	m[key] = elem

Lấy một phần tử:

	elem = m[key]

Xóa một phần tử:

	delete(m, key)

Kiểm tra xem một key có hiện diện hay không bởi 2 biến trả về:

	elem, ok = m[key]

Nếu `key` tồn tại trong `m`, `ok` là `true`. Nếu không, `ok` là `false`.

Nếu `key` không tồn tại trong map, vậy thì `elem` là rỗng dựa theo kiểu của phần tử trong map.

*Chú*ý:* Nếu `elem` hoặc `ok` chưa được khai báo, bạn nên sử dụng khai báo dút gọn:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Bài tập: Map

Triển khai `WordCount`.  Nó nên trả về một map đếm số "từ" xuất hiện trong chuỗi `s`
Hàm `wc.Test` sẽ kiểm tra hàm đó và in ra `success` hoặc `failure`.

Bạn có thể tham khảo [[https://golang.org/pkg/strings/#Fields][strings.Fields]] để tìm kiếm sự giúp đỡ.

.play moretypes/exercise-maps.go

* giá trị của hàm

Hàm cũng là giá trị. Chúng có thể truyền vào giống các giá trị khác.

Giá trị của hàm có lẽ được sử dụng như thể là biến truyền vào hàm khác và trả về các giá trị.

.play moretypes/function-values.go

* Function closure (Hàm bao đóng)

Hàm trong Go có thể bao đóng. Một hàm bao đóng là một hàm có giá trị tham chiếu từ bên ngoài của nó. Hàm đó có thể truy cập hay gán vào biến tham chiếu; Ở đây nghĩa là hàm bị ràng buộc với biến đó.

Ví dụ, hàm `adder` trả về một bao đóng (closure). Cứ mỗi một bao đóng bị ràng buộc với biến `sum` của nó.

.play moretypes/function-closures.go

* Bài tập: Fibonacci closure

Hãy thử đôi chút với hàm.

Triển khai một hàm `fibonacci` mà trả về 1 hàm (bao đóng - closure)
mà trả về các số [[https://en.wikipedia.org/wiki/Fibonacci_number][fibonacci]] nối tiếp.
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Chúc mừng!

Bạn đã hoàn thiện bài học này!

Bạn có thể quay lại [[/list][danh sách]] để tìm kiếm cái gì đó để học tiếp theo, hoặc tiếp tục với [[javascript:click('.next-page')][bài kế tiếp]].
